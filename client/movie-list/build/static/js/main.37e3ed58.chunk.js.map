{"version":3,"sources":["components/Header.js","components/Footer.js","components/MovieList.js","pages/MainContent.js","pages/Favorites.js","components/MovieDetails.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","href","Footer","MovieList","props","Object","values","movies","map","movie","className","key","to","src","poster_path","alt","title","Date","release_date","getFullYear","require","config","MainContent","state","trending","currentPage","offset","fetchTrending","bind","handlePageClick","page","fetch","process","res","ok","Error","status","json","data","this","setState","results","pageCount","total_pages","console","log","window","scrollTo","selected","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","React","Component","Favorites","MovieDetails","match","useEffect","fetchMovie","useState","setMovie","a","params","bgImageStyle","backgroundImage","backdrop_path","style","original_title","overview","App","path","exact","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.37e3ed58.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n\treturn (\n\t\t<nav>\n\t\t\t<ul id='menu-list'>\n\t\t\t\t<li>\n\t\t\t\t\t<a href='/'>Movies</a>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\t<a href='/favorites'>Favorites</a>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<div id='login'>\n\t\t\t\t<a href='/'>Login</a>\n\t\t\t</div>\n\t\t</nav>\n\t)\n}\n\nexport default Header\n","import React from 'react'\n\nconst Footer = () => {\n\treturn <footer>Â© 2020 Alladin Melico</footer>\n}\n\nexport default Footer\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const MovieList = (props) => {\n\treturn (\n\t\t<div id='movie-list'>\n\t\t\t{Object.values(props.movies).map((movie) => (\n\t\t\t\t<div className='movie-item' key={movie.id}>\n\t\t\t\t\t<Link to={`/movie-details/${movie.id}`}>\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc={`http://image.tmdb.org/t/p/w185${movie.poster_path}`}\n\t\t\t\t\t\t\talt=''\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Link>\n\t\t\t\t\t<p>{movie.title}</p>\n\t\t\t\t\t<small>{new Date(movie.release_date).getFullYear()}</small>\n\t\t\t\t</div>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n","import React, { useState, useEffect } from 'react'\nimport { MovieList } from '../components/MovieList'\nimport ReactPaginate from 'react-paginate'\nrequire('dotenv').config()\n\nclass MainContent extends React.Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\ttrending: [],\n\t\t\tcurrentPage: 1,\n\t\t\toffset: 3,\n\t\t}\n\t\tthis.fetchTrending = this.fetchTrending.bind(this)\n\t\tthis.handlePageClick = this.handlePageClick.bind(this)\n\t}\n\n\tasync fetchTrending(page) {\n\t\ttry {\n\t\t\tconst res = await fetch(\n\t\t\t\t`https://api.themoviedb.org/3/trending/movie/week?api_key=${process.env.REACT_APP_TMD_API}&page=${page}`\n\t\t\t)\n\t\t\tif (!res.ok) throw new Error(res.status)\n\n\t\t\tconst data = await res.json()\n\t\t\tthis.setState({\n\t\t\t\ttrending: data.results,\n\t\t\t\tpageCount: data.total_pages,\n\t\t\t})\n\t\t} catch (error) {\n\t\t\tconsole.log(error)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.fetchTrending(this.state.currentPage)\n\t}\n\n\thandlePageClick(data) {\n\t\twindow.scrollTo(0, 0)\n\t\tthis.fetchTrending(++data.selected)\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div id='main-content'>\n\t\t\t\t<MovieList movies={this.state.trending} />\n\t\t\t\t<ReactPaginate\n\t\t\t\t\tpreviousLabel={'previous'}\n\t\t\t\t\tnextLabel={'next'}\n\t\t\t\t\tbreakLabel={'...'}\n\t\t\t\t\tbreakClassName={'break-me'}\n\t\t\t\t\tpageCount={this.state.pageCount}\n\t\t\t\t\tmarginPagesDisplayed={2}\n\t\t\t\t\tpageRangeDisplayed={5}\n\t\t\t\t\tonPageChange={this.handlePageClick}\n\t\t\t\t\tcontainerClassName={'pagination'}\n\t\t\t\t\tsubContainerClassName={'pages pagination'}\n\t\t\t\t\tactiveClassName={'pagination-active'}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default MainContent\n","import React from 'react'\n\nexport const Favorites = () => {\n\treturn <div>gg</div>\n}\n","import React, { useState, useEffect } from 'react'\n\nfunction MovieDetails({ match }) {\n\tuseEffect(() => {\n\t\tfetchMovie()\n\t}, [])\n\n\tconst [movie, setMovie] = useState({})\n\n\tconst fetchMovie = async () => {\n\t\tconst data = await fetch(\n\t\t\t`https://api.themoviedb.org/3/movie/${match.params.id}?api_key=${process.env.REACT_APP_TMD_API}&language=en-US`\n\t\t)\n\t\tconst movie = await data.json()\n\t\tsetMovie(movie)\n\t}\n\n\tconst bgImageStyle = {\n\t\tbackgroundImage:\n\t\t\t'url(http://image.tmdb.org/t/p/w1280/' + movie.backdrop_path + ')',\n\t}\n\treturn (\n\t\t<div className='movie-details'>\n\t\t\t<div style={bgImageStyle} className='bg-image'></div>\n\t\t\t<div className='movie-content'>\n\t\t\t\t<img\n\t\t\t\t\tsrc={`http://image.tmdb.org/t/p/w342/${movie.poster_path}`}\n\t\t\t\t\talt=''\n\t\t\t\t/>\n\t\t\t\t<div className='movie-content-text'>\n\t\t\t\t\t<h3>{movie.original_title}</h3>\n\t\t\t\t\t<p>{movie.overview}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default MovieDetails\n","import React from 'react'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport MainContent from './pages/MainContent'\nimport { Favorites } from './pages/Favorites'\nimport MovieDetails from './components/MovieDetails'\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t\t<div className='app'>\n\t\t\t\t<Header />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route path='/' exact component={MainContent} />\n\t\t\t\t\t<Route path='/favorites' exact component={Favorites} />\n\t\t\t\t\t<Route path='/movie-details/:id' component={MovieDetails} />\n\t\t\t\t</Switch>\n\t\t\t\t<Footer />\n\t\t\t</div>\n\t\t</Router>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n)\n\nexport function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config)\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t)\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.')\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error)\n\t\t})\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type')\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload()\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config)\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t)\n\t\t})\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister()\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message)\n\t\t\t})\n\t}\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}